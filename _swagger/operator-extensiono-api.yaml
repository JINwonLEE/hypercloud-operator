openapi: "3.0.0"
info:
  title: "HyperCloud Operator Extension APIs"
  description: "This is a HyperCloud Operator Extension REST API Docs"
  version: "4.1.0.0"
  contact:
    email: "ck2_3@tmax.co.kr"
servers:
- url: http://192.168.6.211:28677
  description: Test Server

# common parameters
components:
  parameters: # common parameters
    tokenParam:
      in: "header"
      name: "Authorization"
      schema:
        type: "string"
        default: "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJUbWF4LVByb0F1dGgtV2ViSG9vayIsImlkIjoid3ltaW4tdG1heC5jby5rciIsImV4cCI6MTU4MzEyMTQ5M30.hjvrlaLDFuSjchJKarGKbuWOuafhsuCQgBDo-pqsZvg"
      required: true
      description: "Master Token"
    offsetParam:
      in: "query"
      name: "offset"
      required: false
      schema:
        type: "string"
        minimum: 0
        default: 0
      description: "The number of items to skip before starting to collect the result set"
    limitParam:
      in: "query"
      name: "limit"
      required: false
      schema:
        type: "string"
        minimum: 1
        default: 20
      description: "The number of items to return"
  schemas:
    UserLoginDO:
      type: object
      description: "HyperCloud4 Login DO"
      properties:
        id:
          type: string
          description: "User ID"
        password:
          type: string
          description: "User Password"
    TokenDO:
      type: object
      description: "HyperCloud4 Token DO"
      properties:
        accessToken:
          type: string
          description: "Access Token"
        refreshToken:
          type: string
          description: "Refresh Token"
    StatusDO:
      type: object
      description: "HyperCloud4 CRDs Status DO"
      properties:
        status:
          type: object
          properties:
            status:
              type: string
              enum: [Success,Reject]
            reason:
              type: string
    Client:
      type: object
      description: "HyperCloud4 Client DO"
      properties:
        appName:
           type: string
           description: "App Name of Client"
        clientId:
           type: string
           description: "Client ID generated"
        clientSecret:
           type: string
           description: "Client Secret generated"
        originUri:
           type: string
           description: "Origin Uri of Client"
        redirectUri:
           type: string
           description: "Redirect Uri of Client After Oauth Login"
paths:
  /login:
    post:
      tags:
      - "Auth"
      summary: "Hyper Cloud4 Login Service"
      parameters:
      - in: "query"
        name: "clientId"
        description: "Client Id if login as Oauth Client"
        schema:
          type: "string"
      - in: "query"
        name: "appName"
        description: "Client App Name if login as Oauth Client"
        schema:
          type: "string"
      requestBody:
        description: "UserLoginDO"
        required: true  
        content:
          application/json:
            schema:
              type: object
              properties:
                dto:
                  $ref: "#/components/schemas/UserLoginDO"    
              example:
                {
                  "id": "admin@tmax.co.kr",
                  "password": "admin"
                }
      responses:
        200:
          description: Service OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  dto:
                    $ref: "#/components/schemas/TokenDO"
                example:
                  {
                    "accessToken": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                    "refreshToken": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                  }
  /logout:
    post:
      tags:
      - "Auth"
      summary: "Hyper Cloud4 Logout Service"
      requestBody:
        description: "TokenDO"
        content:
          application/json:
            schema:
              type: object
              properties:
                dto:
                  $ref: "#/components/schemas/TokenDO"    
              example:
                {
                  "accessToken": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                }
      responses:
        200:
          description: Service OK
  /refresh:
    post:
      tags:
      - "Auth"
      summary: "Hyper Cloud4 Refresh Service"
      requestBody:
        description: "TokenDO"
        content:
          application/json:
            schema:
              type: object
              properties:
                dto:
                  $ref: "#/components/schemas/TokenDO"    
              example:
                {
                  "accessToken": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                  "refreshToken": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                }
      responses:
        200:
          description: Service OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  dto:
                    $ref: "#/components/schemas/TokenDO"
                example:
                  {
                    "accessToken": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                  }
  /authClient:
    post:
      tags:
      - "Oauth"
      summary: "Hyper Cloud4 Oauth Login Service"
      requestBody:
        description: "Oauth Client Register Service"
        required: true  
        content:
          application/json:
            schema:
              type: object
              properties:
                dto:
                  $ref: "#/components/schemas/Client"    
              example:
                {
                  "appName": "woo-app",
                  "originUri": "woo.co.kr",
                  "redirectUri": "woo.co.kr"
                }
      responses:
        200:
          description: Service OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  dto:
                    $ref: "#/components/schemas/Client"
                example:
                  {
                    "appName": "woo-app",
                    "originUri": "woo.co.kr",
                    "redirectUri": "woo.co.kr",
                    "clientId": "cf1102a7-ed92-4c02-b98d-3cc6e949b7cf",
                    "clientSecret": "uMM9n7Ni2vsgQSZEHJkAm8sQdYKt4v"
                  }
  /loginPage:
    post:
      tags:
      - "Oauth"
      summary: "Hyper Cloud4 Oauth Login Service"
      requestBody:
        description: "Oauth Login Page Create Service"
        required: true  
        content:
          application/json:
            schema:
              type: object
              properties:
                dto:
                  $ref: "#/components/schemas/Client"    
              example:
                {
                  "appName": "woo-app",
                  "clientId": "cf1102a7-ed92-4c02-b98d-3cc6e949b7cf",
                  "clientSecret": "uMM9n7Ni2vsgQSZEHJkAm8sQdYKt4v"
                }
      responses:
        200:
          description: Service OK
          content:
            text/plain:
              schema:
                type: string
                example: "http://192.168.8.36/oauth/login.html?clientId=cf1102a7-ed92-4c02-b98d-3cc6e949b7cf&clientSecret=uMM9n7Ni2vsgQSZEHJkAm8sQdYKt4v"                 
  /apis/tmax.io/v1/namespaceclaims/{claim}/status:
    patch:
      tags:
      - "Claim Status Patch"
      summary: "NamespaceClaim Status Patch Service"
      parameters:
      - $ref: "#/components/parameters/tokenParam"
      - in: "path"
        name: "claim"
        description: "Target Claim Name"
        schema: 
          type: "string"
        required: true
      requestBody:
        description: "StatusDO"
        content:
          application/json:
            schema:
              type: object
              properties:
                dto:
                  $ref: "#/components/schemas/StatusDO"    
              example:
                {
                  "status": {
                    "status" : "Success"
                  }
                }
      responses:
        200:
          description: Service OK
  /apis/tmax.io/v1/namespaces/{namespace}/resourcequotaclaims/{claim}/status:
    patch:
      tags:
      - "Claim Status Patch"
      summary: "ResourceQuotaClaim Status Patch Service"
      parameters:
      - $ref: "#/components/parameters/tokenParam"
      - in: "path"
        name: "namespace"
        description: "Target Namespace Name"
        schema: 
          type: "string"
        required: true
      - in: "path"
        name: "claim"
        description: "Target Claim Name"
        schema: 
          type: "string"
        required: true
      requestBody:
        description: "StatusDO"
        content:
          application/json:
            schema:
              type: object
              properties:
                dto:
                  $ref: "#/components/schemas/StatusDO"    
              example:
                {
                  "status": {
                    "status" : "Success"
                  }
                }
      responses:
        200:
          description: Service OK
  /apis/tmax.io/v1/namespaces/{namespace}/rolebindingclaims/{claim}/status:
    patch:
      tags:
      - "Claim Status Patch"
      summary: "RoleBindingClaim Status Patch Service"
      parameters:
      - $ref: "#/components/parameters/tokenParam"
      - in: "path"
        name: "namespace"
        description: "Target Namespace Name"
        schema: 
          type: "string"
        required: true
      - in: "path"
        name: "claim"
        description: "Target Claim Name"
        schema: 
          type: "string"
        required: true
      requestBody:
        description: "StatusDO"
        content:
          application/json:
            schema:
              type: object
              properties:
                dto:
                  $ref: "#/components/schemas/StatusDO"    
              example:
                {
                  "status": {
                    "status" : "Success"
                  }
                }
      responses:
        200:
          description: Service OK
  /metering:
    get:
      tags:
      - "Metering"
      summary: "Metering Data Get Service"
      parameters:
      - $ref: "#/components/parameters/tokenParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/limitParam"
      - in: "query"
        name: "namespace"
        schema:
          type: "string"
        required: false
        description: "Search by namespace"
      - in: "query"
        name: "timeUnit"
        schema:
          type: "string"
          enum: [hour,day,month,year]
        required: false
        description: "hour/day/month/year"
      - in: "query"
        name: "startTime"
        description: "Time Range Search"
        schema:
          type: "number"
        required: false
      - in: "query"
        name: "endTime"
        description: "Time Range Search"
        schema:
          type: "number"
        required: false
      - in: "query"
        name: "sort"
        description: "For Sorting"
        schema:
          type: "string"
          enum: [namespace,cpu,memory,storage,gpu,private_ip,public_ip,metering_time,-namespace,-cpu,-memory,-storage,-gpu,-private_ip,-public_ip,-metering_time]
        required: false
      responses:
        200:
          description: Service OK
          content:
            application/json:
              schema:
                type: object
                example:
                  [
                    {
                      "id": "6B280E02",
                      "namespace": "metallb-system",
                      "cpu": 0.6,
                      "memory": 629145600,
                      "storage": 0,
                      "gpu" : 0,
                      "publicIp": 0,
                      "privateIp": 0,
                      "meteringTime": 1585098000000
                    },
                    {
                      "id": "6B28E700",
                      "namespace": "hypercloud-system",
                      "cpu": 3.3,
                      "memory": 10737418240,
                      "storage": 161061273600,
                      "gpu" : 0,
                      "publicIp": 0,
                      "privateIp": 0,
                      "meteringTime": 1585098000000
                    }
                  ]
# EOF