apiVersion: tmax.io/v1
kind: Template
metadata:
  name: apache-cicd-template
imageUrl: https://upload.wikimedia.org/wikipedia/commons/4/45/Apache_HTTP_server_logo_%282016%29.png
provider: tmax
recommend: false
shortDescription: apache-cicd
longDescription: apache-cicd-template
tags:
- was
- apache
plans:
- bindable: false
  description: apache
  name: apache-plan1
objects:
- apiVersion: tekton.dev/v1alpha1
  kind: Pipeline
  metadata:
    name: ${PIPELINE_NAME}
    namespace: ${NAMESPACE}
  spec:
    resources:
    - name: source-repo
      type: git
    - name: image
      type: image
    params:
    - name: app-name
      type: string
      description: Application name
    - name: replica
      type: string
      description: Number of replica
      default: "1"
    - name: port
      type: string
      description: Application port
      default: "8080"
    tasks:
    - name: build-source
      taskRef:
        name: s2i
        kind: ClusterTask
      params:
      - name: BUILDER_IMAGE
        value: 192.168.6.110:5000/s2i-apache:2.4
      resources:
        inputs:
        - name: source
          resource: source-repo
        outputs:
        - name: image
          resource: image
    - name: deploy
      conditions:
      - conditionRef: ${PIPELINE_NAME}-condition
        resources:
        - name: scanned-image
          resource: image
          from:
          - build-source
      taskRef:
        name: generate-and-deploy-using-kubectl
        kind: ClusterTask
      resources:
        inputs:
        - name: image
          resource: image
          from:
          - build-source
      params:
      - name: app-name
        value: $(params.app-name)
      - name: replica
        value: $(params.replica)
      - name: port
        value: $(params.port)
- apiVersion: tekton.dev/v1alpha1
  kind: Condition
  metadata:
    name: ${PIPELINE_NAME}-condition
    namespace: ${NAMESPACE}
  spec:
    resources:
    - name: scanned-image
      type: image
    check:
      image: 192.168.6.110:5000/klar:v2.4.0
      env:
      - name: CLAIR_ADDR
        value: http://172.22.11.2:30060
      - name: CLAIR_THRESHOLD
        value: '1000'
      - name: REGISTRY_INSECURE
        value: 'TRUE'
      script: '/klar $(resources.scanned-image.url)'

---

apiVersion: tmax.io/v1
kind: Template
metadata:
  name: django-cicd-template
imageUrl: https://upload.wikimedia.org/wikipedia/commons/7/75/Django_logo.svg
provider: tmax
recommend: false
shortDescription: django-cicd
longDescription: django-cicd-template
tags:
- was
- django
plans:
- bindable: false
  description: django
  name: django-plan1
objects:
- apiVersion: tekton.dev/v1alpha1
  kind: Pipeline
  metadata:
    name: ${PIPELINE_NAME}
    namespace: ${NAMESPACE}
  spec:
    resources:
    - name: source-repo
      type: git
    - name: image
      type: image
    params:
    - name: app-name
      type: string
      description: Application name
    - name: replica
      type: string
      description: Number of replica
      default: "1"
    - name: port
      type: string
      description: Application port
      default: "8080"
    tasks:
    - name: build-source
      taskRef:
        name: s2i
        kind: ClusterTask
      params:
      - name: BUILDER_IMAGE
        value: 192.168.6.110:5000/s2i-django:35
      resources:
        inputs:
        - name: source
          resource: source-repo
        outputs:
        - name: image
          resource: image
    - name: deploy
      conditions:
      - conditionRef: ${PIPELINE_NAME}-condition
        resources:
        - name: scanned-image
          resource: image
          from:
          - build-source
      taskRef:
        name: generate-and-deploy-using-kubectl
        kind: ClusterTask
      resources:
        inputs:
        - name: image
          resource: image
          from:
          - build-source
      params:
      - name: app-name
        value: $(params.app-name)
      - name: replica
        value: $(params.replica)
      - name: port
        value: $(params.port)
- apiVersion: tekton.dev/v1alpha1
  kind: Condition
  metadata:
    name: ${PIPELINE_NAME}-condition
    namespace: ${NAMESPACE}
  spec:
    resources:
    - name: scanned-image
      type: image
    check:
      image: 192.168.6.110:5000/klar:v2.4.0
      env:
      - name: CLAIR_ADDR
        value: http://172.22.11.2:30060
      - name: CLAIR_THRESHOLD
        value: '1000'
      - name: REGISTRY_INSECURE
        value: 'TRUE'
      script: '/klar $(resources.scanned-image.url)'

---

apiVersion: tmax.io/v1
kind: Template
metadata:
  name: nodejs-cicd-template
imageUrl: https://upload.wikimedia.org/wikipedia/commons/d/d9/Node.js_logo.svg
provider: tmax
recommend: false
shortDescription: nodejs-cicd
longDescription: nodejs-cicd-template
tags:
- was
- nodejs
plans:
- bindable: false
  description: nodejs
  name: nodejs-plan1
objects:
- apiVersion: tekton.dev/v1alpha1
  kind: Pipeline
  metadata:
    name: ${PIPELINE_NAME}
    namespace: ${NAMESPACE}
  spec:
    resources:
    - name: source-repo
      type: git
    - name: image
      type: image
    params:
    - name: app-name
      type: string
      description: Application name
    - name: replica
      type: string
      description: Number of replica
      default: "1"
    - name: port
      type: string
      description: Application port
      default: "8080"
    tasks:
    - name: build-source
      taskRef:
        name: s2i
        kind: ClusterTask
      params:
      - name: BUILDER_IMAGE
        value: 192.168.6.110:5000/s2i-nodejs:8
      resources:
        inputs:
        - name: source
          resource: source-repo
        outputs:
        - name: image
          resource: image
    - name: deploy
      conditions:
      - conditionRef: ${PIPELINE_NAME}-condition
        resources:
        - name: scanned-image
          resource: image
          from:
          - build-source
      taskRef:
        name: generate-and-deploy-using-kubectl
        kind: ClusterTask
      resources:
        inputs:
        - name: image
          resource: image
          from:
          - build-source
      params:
      - name: app-name
        value: $(params.app-name)
      - name: replica
        value: $(params.replica)
      - name: port
        value: $(params.port)
- apiVersion: tekton.dev/v1alpha1
  kind: Condition
  metadata:
    name: ${PIPELINE_NAME}-condition
    namespace: ${NAMESPACE}
  spec:
    resources:
    - name: scanned-image
      type: image
    check:
      image: 192.168.6.110:5000/klar:v2.4.0
      env:
      - name: CLAIR_ADDR
        value: http://172.22.11.2:30060
      - name: CLAIR_THRESHOLD
        value: '1000'
      - name: REGISTRY_INSECURE
        value: 'TRUE'
      script: '/klar $(resources.scanned-image.url)'

---

apiVersion: tmax.io/v1
kind: Template
metadata:
  name: tomcat-cicd-template
imageUrl: https://upload.wikimedia.org/wikipedia/commons/7/7b/Tomcat-logo.svg
provider: tmax
recommend: false
shortDescription: tomcat-cicd
longDescription: tomcat-cicd-template
tags:
- was
- tomcat
plans:
- bindable: false
  description: tomcat
  name: tomcat-plan1
objects:
- apiVersion: tekton.dev/v1alpha1
  kind: Pipeline
  metadata:
    name: ${PIPELINE_NAME}
    namespace: ${NAMESPACE}
  spec:
    resources:
    - name: source-repo
      type: git
    - name: image
      type: image
    params:
    - name: app-name
      type: string
      description: Application name
    - name: replica
      type: string
      description: Number of replica
      default: "1"
    - name: port
      type: string
      description: Application port
      default: "8080"
    tasks:
    - name: build-source
      taskRef:
        name: s2i
        kind: ClusterTask
      params:
      - name: BUILDER_IMAGE
        value: 192.168.6.110:5000/s2i-tomcat:latest
      resources:
        inputs:
        - name: source
          resource: source-repo
        outputs:
        - name: image
          resource: image
    - name: deploy
      conditions:
      - conditionRef: ${PIPELINE_NAME}-condition
        resources:
        - name: scanned-image
          resource: image
          from:
          - build-source
      taskRef:
        name: generate-and-deploy-using-kubectl
        kind: ClusterTask
      resources:
        inputs:
        - name: image
          resource: image
          from:
          - build-source
      params:
      - name: app-name
        value: $(params.app-name)
      - name: replica
        value: $(params.replica)
      - name: port
        value: $(params.port)
- apiVersion: tekton.dev/v1alpha1
  kind: Condition
  metadata:
    name: ${PIPELINE_NAME}-condition
    namespace: ${NAMESPACE}
  spec:
    resources:
    - name: scanned-image
      type: image
    check:
      image: 192.168.6.110:5000/klar:v2.4.0
      env:
      - name: CLAIR_ADDR
        value: http://172.22.11.2:30060
      - name: CLAIR_THRESHOLD
        value: '1000'
      - name: REGISTRY_INSECURE
        value: 'TRUE'
      script: '/klar $(resources.scanned-image.url)'

---

apiVersion: tmax.io/v1
kind: Template
metadata:
  name: wildfly-cicd-template
imageUrl: https://upload.wikimedia.org/wikipedia/commons/a/a3/Wildfly_logo.png
provider: tmax
recommend: false
shortDescription: wildfly-cicd
longDescription: wildfly-cicd-template
tags:
- was
- wildfly
plans:
- bindable: false
  description: wildfly
  name: wildfly-plan1
objects:
- apiVersion: tekton.dev/v1alpha1
  kind: Pipeline
  metadata:
    name: ${PIPELINE_NAME}
    namespace: ${NAMESPACE}
  spec:
    resources:
    - name: source-repo
      type: git
    - name: image
      type: image
    params:
    - name: app-name
      type: string
      description: Application name
    - name: replica
      type: string
      description: Number of replica
      default: "1"
    - name: port
      type: string
      description: Application port
      default: "8080"
    tasks:
    - name: build-source
      taskRef:
        name: s2i
        kind: ClusterTask
      params:
      - name: BUILDER_IMAGE
        value: 192.168.6.110:5000/s2i-wildfly:latest
      resources:
        inputs:
        - name: source
          resource: source-repo
        outputs:
        - name: image
          resource: image
    - name: deploy
      conditions:
      - conditionRef: ${PIPELINE_NAME}-condition
        resources:
        - name: scanned-image
          resource: image
          from:
          - build-source
      taskRef:
        name: generate-and-deploy-using-kubectl
        kind: ClusterTask
      resources:
        inputs:
        - name: image
          resource: image
          from:
          - build-source
      params:
      - name: app-name
        value: $(params.app-name)
      - name: replica
        value: $(params.replica)
      - name: port
        value: $(params.port)
- apiVersion: tekton.dev/v1alpha1
  kind: Condition
  metadata:
    name: ${PIPELINE_NAME}-condition
    namespace: ${NAMESPACE}
  spec:
    resources:
    - name: scanned-image
      type: image
    check:
      image: 192.168.6.110:5000/klar:v2.4.0
      env:
      - name: CLAIR_ADDR
        value: http://172.22.11.2:30060
      - name: CLAIR_THRESHOLD
        value: '1000'
      - name: REGISTRY_INSECURE
        value: 'TRUE'
      script: '/klar $(resources.scanned-image.url)'

---

apiVersion: tmax.io/v1
kind: Template
metadata:
  name: mariadb-template
shortDescription: mariadb-deployment
imageUrl: https://upload.wikimedia.org/wikipedia/commons/c/c9/MariaDB_Logo.png
longDescription: mariadb-deployment
provider: tmax
tags:
- db
- mariadb
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP_NAME}-service
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    ports:
    - port: 3306
    selector:
      app: ${APP_NAME}
      tier: mariadb
    clusterIP: None
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APP_NAME}-pvc
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    #storageClassName: manual
    storageClassName: csi-cephfs-sc
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${DB_STORAGE}
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${APP_NAME}-secret
    namespace: ${NAMESPACE}
  type: Opaque
  stringData:
    user: ${MYSQL_USER}
    password: ${MYSQL_PASSWORD}
    database: ${MYSQL_DATABASE}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${APP_NAME}-mariadb
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    selector:
      matchLabels:
        app: ${APP_NAME}
        tier: mariadb
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          tier: mariadb
      spec:
        containers:
        - image: 192.168.6.110:5000/centos/mariadb:10.2
          name: mariadb
          env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: password
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: database
          ports:
          - containerPort: 3306
            name: mariadb
          volumeMounts:
          - name: mariadb-persistent-storage
            mountPath: /var/lib/mysql/data
        volumes:
        - name: mariadb-persistent-storage
          persistentVolumeClaim:
            claimName: ${APP_NAME}-pvc
plans:
- name: mariadb-plan1
  description: mariadb
  metadata:
    bullets:
    - 'Storage Capacity: 5Gi'
    costs:
      amount: 100
      unit: $
  free: false
  bindable: true
  plan_updateable: false
  schemas:
    service_instance:
      create:
        parameters:
          APP_NAME: mariadb-deploy
          NAMESPACE: default
          DB_STORAGE: 5Gi
          MYSQL_USER: root1
          MYSQL_PASSWORD: tmax@23
          MYSQL_DATABASE: root1
- name: mariadb-plan2
  description: mariadb
  metadata:
    bullets:
    - 'Storage Capacity: 30Gi'
    costs:
      amount: 500
      unit: $
  free: false
  bindable: true
  plan_updateable: false
  schemas:
    service_instance:
      create:
        parameters:
          APP_NAME: mariadb-deploy
          NAMESPACE: default
          DB_STORAGE: 30Gi
          MYSQL_USER: root1
          MYSQL_PASSWORD: tmax@23
          MYSQL_DATABASE: root1

---

apiVersion: tmax.io/v1
kind: Template
metadata:
  name: mongodb-template
shortDescription: mongodb-deployment
imageUrl: https://upload.wikimedia.org/wikipedia/en/4/45/MongoDB-Logo.svg
longDescription: mongodb-deployment
provider: tmax
tags:
- db
- mongodb
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP_NAME}-service
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    ports:
    - port: 27017
    selector:
      app: ${APP_NAME}
      tier: mongodb
    clusterIP: None
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APP_NAME}-pvc
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    #storageClassName: manual
    storageClassName: csi-cephfs-sc
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${DB_STORAGE}
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${APP_NAME}-secret
    namespace: ${NAMESPACE}
  type: Opaque
  stringData:
    user: ${MONGODB_USER}
    password: ${MONGODB_PASSWORD}
    database: ${MONGODB_DATABASE}
    adminpassword: ${MONGODB_ADMIN_PASSWORD}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${APP_NAME}-mongodb
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    selector:
      matchLabels:
        app: ${APP_NAME}
        tier: mongodb
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          tier: mongodb
      spec:
        containers:
        - image: 192.168.6.110:5000/centos/mongodb:2.6
          name: mongodb
          env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: user
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: password
          - name: MONGODB_DATABASE
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: database
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: adminpassword
          ports:
          - containerPort: 27017
            name: mongodb
          volumeMounts:
          - name: mongodb-persistent-storage
            mountPath: /var/lib/mongodb/data
        volumes:
        - name: mongodb-persistent-storage
          persistentVolumeClaim:
            claimName: ${APP_NAME}-pvc
plans:
- name: mongodb-plan1
  description: mongodb
  metadata:
    bullets:
    - 'Storage Capacity: 5Gi'
    costs:
      amount: 100
      unit: $
  free: false
  bindable: true
  plan_updateable: false
  schemas:
    service_instance:
      create:
        parameters:
          APP_NAME: mongodb-deploy
          NAMESPACE: default
          DB_STORAGE: 5Gi
          MONGODB_USER: root
          MONGODB_PASSWORD: root
          MONGODB_DATABASE: root
          MONGODB_ADMIN_PASSWORD: root
- name: mongodb-plan2
  description: mongodb
  metadata:
    bullets:
    - 'Storage Capacity: 30Gi'
    costs:
      amount: 500
      unit: $
  free: false
  bindable: true
  plan_updateable: false
  schemas:
    service_instance:
      create:
        parameters:
          APP_NAME: mongodb-deploy
          NAMESPACE: default
          DB_STORAGE: 30Gi
          MONGODB_USER: root
          MONGODB_PASSWORD: root
          MONGODB_DATABASE: root
          MONGODB_ADMIN_PASSWORD: root

---

apiVersion: tmax.io/v1
kind: Template
metadata:
  name: mysql-template
shortDescription: mysql-deployment
imageUrl: https://upload.wikimedia.org/wikipedia/en/6/62/MySQL.svg
longDescription: mysql-deployment
provider: tmax
tags:
- db
- mysql
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP_NAME}-service
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    ports:
    - port: 3306
    selector:
      app: ${APP_NAME}
      tier: mysql
    clusterIP: None
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APP_NAME}-pvc
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    #storageClassName: manual
    storageClassName: csi-cephfs-sc
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${DB_STORAGE}
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${APP_NAME}-secret
    namespace: ${NAMESPACE}
  type: Opaque
  stringData:
    user: ${MYSQL_USER}
    password: ${MYSQL_PASSWORD}
    database: ${MYSQL_DATABASE}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${APP_NAME}-mysql
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    selector:
      matchLabels:
        app: ${APP_NAME}
        tier: mysql
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          tier: mysql
      spec:
        containers:
        - image: 192.168.6.110:5000/centos/mysql:5.7
          name: mysql
          env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: password
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: database
          ports:
          - containerPort: 3306
            name: mysql
          volumeMounts:
          - name: mysql-persistent-storage
            mountPath: /var/lib/mysql/data
        volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: ${APP_NAME}-pvc
plans:
- name: mysql-plan1
  description: mysql
  metadata:
    bullets:
    - 'Storage Capacity: 5Gi'
    costs:
      amount: 100
      unit: $
  free: false
  bindable: true
  plan_updateable: false
  schemas:
    service_instance:
      create:
        parameters:
          APP_NAME: mysql-deploy
          NAMESPACE: default
          DB_STORAGE: 5Gi
          MYSQL_USER: root1
          MYSQL_PASSWORD: tmax@23
          MYSQL_DATABASE: root1
- name: mysql-plan2
  description: mysql
  metadata:
    bullets:
    - 'Storage Capacity: 30Gi'
    costs:
      amount: 500
      unit: $
  free: false
  bindable: true
  plan_updateable: false
  schemas:
    service_instance:
      create:
        parameters:
          APP_NAME: mysql-deploy
          NAMESPACE: default
          DB_STORAGE: 30Gi
          MYSQL_USER: root1
          MYSQL_PASSWORD: tmax@23
          MYSQL_DATABASE: root1

---

apiVersion: tmax.io/v1
kind: Template
metadata:
  name: postgresql-template
shortDescription: postgresql-deployment
imageUrl: https://upload.wikimedia.org/wikipedia/commons/2/29/Postgresql_elephant.svg
longDescription: postgresql-deployment
provider: tmax
tags:
- db
- postgresql
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP_NAME}-service
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    ports:
    - port: 5432
    selector:
      app: ${APP_NAME}
      tier: postgresql
    clusterIP: None
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APP_NAME}-pvc
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    #storageClassName: manual
    storageClassName: csi-cephfs-sc
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${DB_STORAGE}
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${APP_NAME}-secret
    namespace: ${NAMESPACE}
  type: Opaque
  stringData:
    user: ${POSTGRESQL_USER}
    password: ${POSTGRESQL_PASSWORD}
    database: ${POSTGRESQL_DATABASE}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${APP_NAME}-postgresql
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    selector:
      matchLabels:
        app: ${APP_NAME}
        tier: postgresql
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          tier: postgresql
      spec:
        containers:
        - image: 192.168.6.110:5000/centos/postgresql:9.6
          name: postgresql
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: user
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: password
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: database
          ports:
          - containerPort: 5432
            name: postgresql
          volumeMounts:
          - name: postgresql-persistent-storage
            mountPath: /var/lib/pgsql/data
        volumes:
        - name: postgresql-persistent-storage
          persistentVolumeClaim:
            claimName: ${APP_NAME}-pvc
plans:
- name: postgresql-plan1
  description: postgresql
  metadata:
    bullets:
    - 'Storage Capacity: 5Gi'
    costs:
      amount: 100
      unit: $
  free: false
  bindable: true
  plan_updateable: false
  schemas:
    service_instance:
      create:
        parameters:
          APP_NAME: postgresql-deploy
          NAMESPACE: default
          DB_STORAGE: 5Gi
          POSTGRESQL_USER: root
          POSTGRESQL_PASSWORD: tmax@23
          POSTGRESQL_DATABASE: root
- name: postgresql-plan2
  description: postgresql
  metadata:
    bullets:
    - 'Storage Capacity: 30Gi'
    costs:
      amount: 500
      unit: $
  free: false
  bindable: true
  plan_updateable: false
  schemas:
    service_instance:
      create:
        parameters:
          APP_NAME: postgresql-deploy
          NAMESPACE: default
          DB_STORAGE: 30Gi
          POSTGRESQL_USER: root
          POSTGRESQL_PASSWORD: tmax@23
          POSTGRESQL_DATABASE: root

---

apiVersion: tmax.io/v1
kind: Template
metadata:
  name: redis-template
shortDescription: redis-deployment
imageUrl: https://upload.wikimedia.org/wikipedia/en/6/6b/Redis_Logo.svg
longDescription: redis-deployment
provider: tmax
tags:
- db
- redis
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP_NAME}-service
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    ports:
    - port: 6379
    selector:
      app: ${APP_NAME}
      tier: redis
    clusterIP: None
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APP_NAME}-pvc
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    #storageClassName: manual
    storageClassName: csi-cephfs-sc
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${DB_STORAGE}
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${APP_NAME}-secret
    namespace: ${NAMESPACE}
  type: Opaque
  stringData:
    dbservicename: ${DATABASE_SERVICE_NAME}
    password: ${REDIS_PASSWORD}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${APP_NAME}-redis
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    selector:
      matchLabels:
        app: ${APP_NAME}
        tier: redis
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          tier: redis
      spec:
        containers:
        - image: 192.168.6.110:5000/centos/redis:3.2
          name: redis
          env:
          - name: DATABASE_SERVICE_NAME
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: dbservicename
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: password
          ports:
          - containerPort: 6379
            name: redis
          volumeMounts:
          - name: redis-persistent-storage
            mountPath: /var/lib/redis/data
        volumes:
        - name: redis-persistent-storage
          persistentVolumeClaim:
            claimName: ${APP_NAME}-pvc
plans:
- name: redis-plan1
  description: redis
  metadata:
    bullets:
    - 'Storage Capacity: 5Gi'
    costs:
      amount: 100
      unit: $
  free: false
  bindable: true
  plan_updateable: false
  schemas:
    service_instance:
      create:
        parameters:
          APP_NAME: redis-deploy
          NAMESPACE: default
          DB_STORAGE: 5Gi
          DATABASE_SERVICE_NAME: redis
          REDIS_PASSWORD: tmax@23
- name: redis-plan2
  description: redis
  metadata:
    bullets:
    - 'Storage Capacity: 30Gi'
    costs:
      amount: 500
      unit: $
  free: false
  bindable: true
  plan_updateable: false
  schemas:
    service_instance:
      create:
        parameters:
          APP_NAME: redis-deploy
          NAMESPACE: default
          DB_STORAGE: 30Gi
          DATABASE_SERVICE_NAME: redis
          REDIS_PASSWORD: tmax@23